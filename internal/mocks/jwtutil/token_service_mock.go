// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockTokenService creates a new instance of MockTokenService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTokenService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTokenService {
	mock := &MockTokenService{}
	mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTokenService is an autogenerated mock type for the TokenService type
type MockTokenService struct {
	mock.Mock
}

type MockTokenService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTokenService) EXPECT() *MockTokenService_Expecter {
	return &MockTokenService_Expecter{mock: &_m.Mock}
}

// Generate provides a mock function for the type MockTokenService
func (_mock *MockTokenService) Generate(userID string, role string) (string, error) {
	ret := _mock.Called(userID, role)

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return returnFunc(userID, role)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = returnFunc(userID, role)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(userID, role)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTokenService_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type MockTokenService_Generate_Call struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
//   - userID string
//   - role string
func (_e *MockTokenService_Expecter) Generate(userID interface{}, role interface{}) *MockTokenService_Generate_Call {
	return &MockTokenService_Generate_Call{Call: _e.mock.On("Generate", userID, role)}
}

func (_c *MockTokenService_Generate_Call) Run(run func(userID string, role string)) *MockTokenService_Generate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTokenService_Generate_Call) Return(s string, err error) *MockTokenService_Generate_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockTokenService_Generate_Call) RunAndReturn(run func(userID string, role string) (string, error)) *MockTokenService_Generate_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function for the type MockTokenService
func (_mock *MockTokenService) Validate(tokenString string) (map[string]interface{}, error) {
	ret := _mock.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 map[string]interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (map[string]interface{}, error)); ok {
		return returnFunc(tokenString)
	}
	if returnFunc, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = returnFunc(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(tokenString)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTokenService_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockTokenService_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - tokenString string
func (_e *MockTokenService_Expecter) Validate(tokenString interface{}) *MockTokenService_Validate_Call {
	return &MockTokenService_Validate_Call{Call: _e.mock.On("Validate", tokenString)}
}

func (_c *MockTokenService_Validate_Call) Run(run func(tokenString string)) *MockTokenService_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTokenService_Validate_Call) Return(stringToIfaceVal map[string]interface{}, err error) *MockTokenService_Validate_Call {
	_c.Call.Return(stringToIfaceVal, err)
	return _c
}

func (_c *MockTokenService_Validate_Call) RunAndReturn(run func(tokenString string) (map[string]interface{}, error)) *MockTokenService_Validate_Call {
	_c.Call.Return(run)
	return _c
}
